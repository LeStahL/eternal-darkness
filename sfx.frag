#version 130

uniform float iBlockOffset;
uniform float iSampleRate;
uniform float iVolume;

#define DEBUG_ONLY_DRUMS false
#define DEBUG_ONLY_MELO  false
#define DEBUG_ONLY_TRACK -1

// #define index(it, in) (track_sep[it]+in)
// int index(int it, float )

#define PI radians(180.)
float _sin(float a) { return sin(2. * PI * mod(a,1.)); }
float _unisin(float a,float b) { return (.5*_sin(a) + .5*_sin((1.+b)*a)); }
float _sq(float a) { return sign(2.*fract(a) - 1.); }
float _squ(float a,float pwm) { return sign(2.*fract(a) - 1. + pwm); }
float _tri(float a) { return (4.*abs(fract(a)-.5) - 1.); }
float _saw(float a) { return (2.*fract(a) - 1.); }
float quant(float a,float div,float invdiv) { return floor(div*a+.5)*invdiv; }
float quanti(float a,float div) { return floor(div*a+.5)/div; }
float clip(float a) { return clamp(a,-1.,1.); }
float theta(float x) { return smoothstep(0., 0.01, x); }
float freqC1(int note){ return 27.5 * pow(2.,float(note+3)/12.); }
float minus1hochN(int n) { return (1. - 2.*float(n % 2)); }

const float BPM = 155. * .5;
const float BPS = BPM/60.;
const float SPB = 60./BPM;

float doubleslope(float t, float a, float d, float s)
{
    return smoothstep(-.00001,a,t) - (1.-s) * smoothstep(0.,d,t-a);
}

float TRISQ(float t, float f, int MAXN, float MIX, float INR, float NDECAY, float RES, float RES_Q)
{
    float ret = 0.;
    
    for(int N=0; N<=MAXN; N++)
    {
        float mode     = 2.*float(N) + 1.;
        float inv_mode = 1./mode; 		// avoid division? save table of Nmax <= 20 in some array or whatever
        float comp_TRI = (N % 2 == 1 ? -1. : 1.) * inv_mode*inv_mode;
        float comp_SQU = inv_mode;
        float filter_N = pow(1. + pow(float(N) * INR,2.*NDECAY),-.5) + RES * exp(-pow(float(N)*INR*RES_Q,2.));

        ret += (MIX * comp_TRI + (1.-MIX) * comp_SQU) * filter_N * _sin(mode * f * t);
    }
    
    return ret;
}

float QTRISQ(float t, float f, float QUANT, int MAXN, float MIX, float INR, float NDECAY, float RES, float RES_Q)
{
    return TRISQ(quant(t,QUANT,1./QUANT), f, MAXN, MIX, INR, NDECAY, RES, RES_Q);
}

float env_ADSR(float x, float L, float A, float D, float S, float R)
{
    float att = pow(x/A,8.);
    float dec = S + (1.-S) * exp(-(x-A)/D);
    float rel = (x < L-R) ? 1. : pow((L-x)/R,4.);

    return (x < A ? att : dec) * rel;
    
}

float macesaw(float t, float f, float CO, float Q, float det1, float det2, float res, float resQ)
{
    float s = 0.;
    float inv_CO = 1./CO;
    float inv_resQ = 1./resQ;
    float p = f*t;
        for(int N=1; N<=200; N++)
        {
            // saw
            float sawcomp = 2./PI * (1. - 2.*float(N % 2)) * 1./float(N);
            float filterN  = pow(1. + pow(float(N)*f*inv_CO,Q),-.5)
                     + res * exp(-pow((float(N)*f-CO)*inv_resQ,2.));
            
            if(abs(filterN*sawcomp) < 1e-4) break;
        		
            if(det1 > 0. || det2 > 0.)
            {
                s += 0.33 * (_sin(float(N)*p) + _sin(float(N)*p*(1.+det1)) + _sin(float(N)*p*(1.+det2)));
            }
            else
            {
                s += filterN * sawcomp * _sin(float(N)*p);
            }
        }
    return s;
}

float maceskuh(float t, float f, float CO, float Q, float det1, float det2, float res, float resQ, float pw)
{
    float s = 0.;
    float inv_CO = 1./CO;
    float inv_resQ = 1./resQ;
    float p = f*t;
        for(int N=1; N<=200; N++)
        {
            // variable pulse wave: voll verrechnet, klingt aber geil =D
            float plscomp  = 1./float(N) * (1. + (2.*float(N%2)-1.)*_sin(pw)); 
            float filterN  = pow(1. + pow(float(N)*f*inv_CO,Q),-.5)
                     + res * exp(-pow((float(N)*f-CO)*inv_resQ,2.));
            
            float comp = plscomp * filterN;
            
            if(abs(comp) < 1e-6) break;
        		
            if(det1 > 0. || det2 > 0.)
            {
                s += comp * 0.33 * (_sin(float(N)*p) + _sin(float(N)*p*(1.+det1)) + _sin(float(N)*p*(1.+det2)));
            }
            else
            {
                s += comp * _sin(float(N)*p);
            }
        }
    return 2.*s-1.;
}


float macesanderekuh(float t, float f, float CO, float Q, float det1, float det2, float res, float resQ, float pw)
{
    float s = 0.;
    float inv_CO = 1./CO;
    float inv_resQ = 1./resQ;
    float p = f*t;
        for(int N=1; N<=200; N++)
        {
            // varialbe pulse wave:
            float plscomp  = 1./(2.*PI*float(N)) * (minus1hochN(N)*_sin(pw*float(N)+.25) - 1.);
            float filterN  = pow(1. + pow(float(N)*f*inv_CO,Q),-.5)
                     + res * exp(-pow((float(N)*f-CO)*inv_resQ,2.));
            
            float comp = filterN * plscomp;
            
            if(abs(comp) < 1e-6) break;
        		
            if(det1 > 0. || det2 > 0.)
            {
                s += comp * 0.33 * (_sin(float(N)*p) + _sin(float(N)*p*(1.+det1)) + _sin(float(N)*p*(1.+det2)));
            }
            else
            {
                s += comp * _sin(float(N)*p);
            }
        }
    return 2.*s-1.;
}


float freq_malformation(float t, float t_on, int vel, int Bsyn)
{
    t = t - min(t, t_on);
    
    float f = 80.;
    
    float fFM = 100.;
    float aFM = 0.01 * doubleslope(t, 0.8, 0.4, 0.5);
    float aFB = 0.000;
    
    float E = doubleslope(t, 0.2, 1., 0.);
    float r = _sin(t * f * (1. + aFM * _sin(t * fFM * (1. + aFB * _sin(t*fFM)))));
    return E * r;
}

float snare(float t, float t_on, int vel, int Bsyn)
{
    // #define _tri(a) (4.*abs(fract(a)-.5) - 1.)
    t = t - min(t, t_on);
    float f1 = 6000.;
    float f2 = 800.;
    float f3 = 350.;
    float dec12 = 0.01;
    float dec23 = 0.01;
    float rel = 0.1;
    float snr = _tri(t * (f3 + (f1-f2)*smoothstep(-dec12,0.,-t)
                             + (f2-f3)*smoothstep(-dec12-dec23,-dec12,-t))) * smoothstep(-rel,-dec12-dec23,-t);
        
    //noise part
    float noise = fract(sin(t * 90.) * 45000.) * doubleslope(t,0.05,0.3,0.3);
    
    float overdrv = 2.;
    
    return float(vel)/100. * clamp(overdrv * snr + noise, -1., 1.) * doubleslope(t,0.0,0.25,0.3);
}

float hut(float t, float t_on, int vel, int Bsyn)
{
    t = t - min(t, t_on);
    float noise = fract(sin(t * 90.) * 45000.);
    noise = 1./(1.+noise);
    return float(vel)/100. * noise * doubleslope(t,0.,0.12,0.0);
    
    // might think of this one! - maybe tune length / pitch
    //float kick_blubb = (1.-exp(-1000.*t))*exp(-30.*t) * _sin((400.-200.*t)*t * _saw(4.*f*t));
}

float shake(float t, float t_on, int vel, int Bsyn) // shaker is just some mod of hihat (hut)
{
    t = t - min(t, t_on);
    return float(vel)/100. * 0.5 * fract(sin(t * 90.) * 45000.) * doubleslope(t,0.03,0.15,0.15);
}

float hoskins_noise(float t) // thanks to https://www.shadertoy.com/view/4sjSW1 !
{
    float p = floor(t * (1500.0 * exp(-t*.100)));
	vec2 p2 = fract(vec2(p * 5.3983, p * 5.4427));
    p2 += dot(p2.yx, p2.xy + vec2(21.5351, 14.3137));
	return fract(p2.x * p2.y * 3.4337) * .5 * smoothstep(-.3,0.,-t);    
}

float facekick(float t, float t_on, int vel, int Bsyn)
{
    t = t - min(t, t_on); // reset time to Bon event
    
    float f   = 50. + 150. * smoothstep(-0.12, 0., -t);
    float env = smoothstep(0.,0.015,t) * smoothstep(-0.08, 0., 0.16 - t);
    
    float kick_body = env * TRISQ(t, f, 3, 1., 0.8, 8., 4., 1.); // more heavy bass drum: increase reso parameters?
    
    float kick_click = 0.4 * step(t,0.03) * _sin(t*1100. * _saw(t*800.));
    
    float kick_blobb = (1.-exp(-1000.*t))*exp(-40.*t) * _sin((400.-200.*t)*t * _sin(1.*f*t));
    
	return float(vel)/100. * (kick_body + kick_blobb + kick_click);
}

float distsin(float t, float B, float Bon, float Boff, int note, int Bsyn) //Bsyn: select synth. ignore for now.
{
    if(note > 100) note = note % 100; // this is for duophony, but my editor doesn't support it

    float Bprog = B-Bon;			// progress within Bar
    float Bproc = Bprog/(Boff-Bon); // relative progress
    float _t = SPB*(B - Bon); // reset time to Bon event
    float f = freqC1(note);

    float env = theta(B-Bon) * theta(Boff-B);
	float sound = clamp(1.1 * _sin(freqC1(note)*t), -0.999,0.999);

	if(Bsyn == -1) return 0.; // test reasons: mute
	
	if(Bsyn == 0)
        return env * sound; // test reasons: just give out something simple

    // TEST FRENCH HORN
//     Bsyn = 15;

    if(Bsyn == 80)
    {
        env *= 0.3;
        
        sound = macesaw(t, f, 3000., 0.1, 0., 0., 0., 0.); 
        
        sound = _saw(t*f);
    }

    if(Bsyn == 14) // test of mace-sq (matzeskuh)
    {
        env *= env_ADSR(Bprog,Boff-Bon,0.1,1.,1.,0.5);
        
//         env *= 0.5;
        
        float filterCO = 600. * env_ADSR(Bprog,Boff-Bon,2.,0.,1.,2.) + 40. * sqrt(f);

        sound += 0.3*macesanderekuh(t, f, filterCO, 30., 0.002, -0.01, 0.0, 0.0, 0.1);
        
        sound = clip(0.8*sound);
    }

    if(Bsyn == 15) // can I manage some horns, some day?
    {
        env *= env_ADSR(Bprog,Boff-Bon,.5,0.,0.2,0.);
        
        env *= 0.5;
        
        float filterCO = 100. * env_ADSR(Bprog,Boff-Bon,2.,0.,1.,0.) + 20. * sqrt(f);

        sound = 0.2*macesaw(t, f, filterCO, 50., -0.01-0.005*_sin(0.5*Bproc), 0.01-0.008*_sin(0.25*Bproc+.25), 0.0, 0.);

        sound += 0.3*maceskuh(t, f, filterCO, 30., 0.002, -0.01, 0.0, 0.0, 0.1+0.06*_sin(0.25*_t));

//        sound += 0.1*maceskuh(t, 2.*f, filterCO, 10., 0.004, -0.002, 0.0, 0.0, -0.1+0.03*_sin(2.*t));
        
        sound = clip(0.8*sound);
    }
    
    if(Bsyn == 16) // super saw pad
    {
        env *= env_ADSR(Bprog,Boff-Bon,1.5,2.,0.2,0.8);
        
        env *= 0.5;
        
        float filterQ = 100.;
        float filterCO = 200. + 100. * env_ADSR(Bprog,Boff-Bon,1.5,2.5,0.2,10.);

        sound = 0.9*macesaw(t, f, filterCO, filterQ, 0.010, 0.016, 0.0, 0.);
       	// t --> quanti(t, 4096); // some nice wicked lo-bit shit
        
     
        sound = 0.4 * (0.5*_saw(t*f+.1+0.1*_sin(2.*t)) + _saw(t*f+.25) + _saw(t*f+0.2*_sin(0.5*t)));
        // lo-fi noise
        //sound = quanti(sound, 128.);
    }

    if(Bsyn == 81) // super saw... something. with filter key following
    {
        env *= env_ADSR(Bprog,Boff-Bon,.01,.00,1.,0.0);
        
        float filterQ = 120.;
        float filterCO = 900. + 6.*sqrt(f); // + 200. * env_ADSR(Bprog,Boff-Bon,.02,1.,1.,0.003);

//         sound = macesaw(t, f, filterCO, filterQ, 0.010, 0.016, 0.0, 0.);
       	// t --> quanti(t, 4096); // some nice wicked lo-bit shit
        
     // FORGET IT
        sound = 0.4 * (0.5*_saw(t*f+.1+0.1*_sin(2.*t)) + _saw(t*f+.24+.01*_sin(4.*Bprog)) + _saw(t*f+0.2*_sin(0.5*t)));
//        sound = 0.4 * (0.5*_saw(t*f+.1+0.1*_sin(2.*t)) + _saw(t*f+.25) + _saw(t*f+0.2*_sin(0.5*t)));
        // lo-fi noise
        //sound = quanti(sound, 128.);
    }
    
    
    if(Bsyn == 17) // deftiges pad
    {
//        env *= env_ADSR(Bprog,Boff-Bon,0.6,0.5,0.9,0.1); // war: 1.5, 2., 0.2, 1. oder so 
        env *= env_ADSR(Bproc,1.,0.1,0.5,0.9,0.01); // war: 1.5, 2., 0.2, 1. oder so 
        
        float filterQ = 20.;
        float filterCO = 200. + 100. * env_ADSR(Bprog,Boff-Bon,1.5,2.5,0.2,10.);
       
        sound = 0.6*macesaw(t, f, filterCO, filterQ, 0.010, 0.020, 0.0, 3.);
       	// t --> quanti(t, 4096); // some nice wicked lo-bit shit
        
        sound += 0.3*macesaw(t, 1.98*f, 1.3*filterCO, filterQ, 0.010, 0.020, 0.00, 1.);
        
        // lo-fi noise
        //sound = quanti(sound, 128.);
    }

    
    if(Bsyn == 10) // Alright, this is not mellow, but wayne.
    {
        sound = _tri(2.*f*t) + _tri(0.999*2.*f*_t*(1.+0.0001*_sin(4.*_t)));
        
        sound += 0.2 * _saw(5.01*f*t)
               + 0.2 * _saw(14.01*f*t);
        
        sound += _saw(t * (f + 1000. * smoothstep(-0.1,0.,-Bprog))) * smoothstep(-0.1,0.,-Bprog);
        
        sound *= 0.2;
    }
    
    if(Bsyn == 20)
    {
        sound = QTRISQ(t, freqC1(note), 1024., 16, 0.2, 8. + 20.*smoothstep(0.,0.3,Bproc), 1.2, 0.2, 0.1)
              + QTRISQ(t, 2.*freqC1(note), 1024., 16, 0.4, 8. + 20.*smoothstep(0.,0.1,Bproc), 1.2, 0.2, 0.1);
        
        sound = 0.8 * sound * exp(-4.0*Bprog);

        sound += 0.4*_sin(_t*f) * exp(-2.0*Bprog);
        sound += 0.4*_tri(_t*4.*f) * exp(-8.0*Bprog);
        
        sound += 0.6 * smoothstep(0.,1.2,Bproc) * (0.5 * _squ(_t*f,0.) + 0.5 * _squ(_t*f*.99,0.01));
        
        //sound = clip(1.3*sound);
    }

    else if(Bsyn == 22)
    {
        float kappa = 1.4;
    	float dist = 1.3;

        env *= exp(-kappa*(B-Bon));
        
        float freq_mod = 1. + 0.02 * exp(-10.*(B-Bon)); // edgy sound
        freq_mod = 1.;
            
        //sound = 0.7*sound + 0.3*clamp(2.*dist * _sin(freqC1(note+12)*(t-1e-3)), -0.999,0.999);
        
    	sound  = 0.7 * _squ(freq_mod * freqC1(note)*t, -0.4 - 0.15*_sin(0.3*(B-Bon)));
        
        // add subbass
        sound += 0.5 * _unisin(freqC1(note)*t,0.05 * _sin(0.25*t));

        //reduce bit depth to 4
        //sound = quant(sound, 4., 0.25);
        
        // try something else, QTRISQ is my additive low-samplerate osci with improvized filter
        // QTRISQ(float t, float f, float QUANT, int MAXN, float MIX, float INR, float NDECAY, float RES, float RES_Q)
        sound = QTRISQ(t, freqC1(note), 1024., 16, 0.2, 8. + 20.*smoothstep(0.,0.3,Bproc), 1.2, 0.2, 0.1)
              + QTRISQ(t, 2.*freqC1(note), 1024., 16, 0.4, 8. + 20.*smoothstep(0.,0.1,Bproc), 1.2, 0.2, 0.1);
        
	    float im = 2. + .5*_sin(0.21*_t);
        float y = _sin(4.*f*_t + im*_sin(0.25*f*Bproc) );
        
    }

    else if(Bsyn == 21)
    {
        float kappa = 1.4;
    	float dist = 1.3;

        env *= exp(-kappa*(B-Bon));
        
        float freq_mod = 1. + 0.02 * exp(-10.*(B-Bon)); // edgy sound
        freq_mod = 1.;
            
        //sound = 0.7*sound + 0.3*clamp(2.*dist * _sin(freqC1(note+12)*(t-1e-3)), -0.999,0.999);
        
    	sound  = 0.7 * _squ(freq_mod * freqC1(note)*t, -0.4 - 0.15*_sin(0.3*(B-Bon)));
        
        // add subbass
        sound += 0.5 * _unisin(freqC1(note)*t,0.05 * _sin(0.25*t));

        //reduce bit depth to 4
        //sound = quant(sound, 4., 0.25);

    }

    else if(Bsyn == 13) // inspired by some other shader. forgot which one. sorry.
    {
	    float im = 2. + .5*_sin(0.21*_t);
        float y = _sin(4.*f*_t + im*_sin(0.25*f*Bproc) );
        
        sound = y;
    }

    
    else if(Bsyn == 4)
    {
    	sound = QTRISQ(t, freqC1(note), 2048., 20, 0.2, 3. + 5.*smoothstep(0.,0.3,Bproc), 1.2, 0.2, 0.1)
              + QTRISQ(t, 2.*freqC1(note), 1024., 10, 0.4, 1. + 3.*smoothstep(0.,0.3,Bproc), 1.2, 0.2, 0.1);
        
        sound *= 0.3;
    }
    
    else if(Bsyn == 1)
    {
    	float dist = 1.3;

        env = smoothstep(0., 0.25, B-Bon) * (1.+0.01*sin(2.*PI*20.*t)) * theta(Boff-B);
        
		sound = 0.3*(clamp(dist * _sin(freqC1(note)*t)           , -0.999,0.999)
                   + clamp(dist * _sin(0.999*freqC1(note)*t+0.05), -0.999,0.999));

        sound += 0.7 * _unisin(freqC1(note)*t,0.05);    
    }
    
    else if(Bsyn == 31)
    {
        env *= exp(-2.7*Bproc);
        
        sound = _squ(t*f, 0.1 + 0.02*_sin(4.*Bproc));
    }
    
    else if(Bsyn == 2)
    {   
    	float fFM = 0.33*f;
    	float aFM = 0.3 * doubleslope(_t,1.,5.,0.01);
		float aFB = 0.02 * doubleslope(_t,2.,8.,0.00);
    
        env = doubleslope(B-Bon, 0.002, 2., 0.);
    	sound = _sin(_t * f * (1. + aFM * _sin(_t * fFM * (1. + aFB * _sin(_t * fFM)))));
        
        //reduce bit depth to 16
        sound = quant(sound, 16., 0.0625);
        
        // rectify
        //sound = sign(sound);

        // try downsampling
        env = doubleslope(B-Bon, 0.01, 8., 0.);
        sound = 0.3 * _unisin(quant(_t,256.,0.004) * f * .25, 0.05);
    
        // check tuning
        sound += _sin(_t * f * 0.25);
    }    
    
    else if(Bsyn == 3)
    {
        float kappa = 1.4;
        env *= exp(-kappa*(B-Bon));
        sound = _unisin(t*freqC1(note),0.001)
              + _tri(t*2.*freqC1(note)*(1.+0.0001*_sin(0.5*Bproc))) * smoothstep(0.0,0.3, Bprog);

    	//try some trumpet sound
        float freq_LFO = 0.005 * smoothstep(0.,1.,_t) * _tri(_t);
        sound = _saw(_t*freqC1(note)*(1.+freq_LFO) + 0.3 * smoothstep(0.,0.7,_t) * _saw(_t*3.01*freqC1(note)));
        
        // now model after DX reface
        // frequency ratio
        float FR2 = 0.998;
        float FR1 = 0.5;
       	// level
        float LV2 = 0.5;
        float LV1 = 1.;
        // feedback
        float FB2 = 0.1;
        float FB1 = 0.6;
		// actual algorithm (5?)
        float OP2 = _saw(_t * FR2 * (freqC1(note) + FB2 * _saw(_t * FR2 * freqC1(note))));
        float OP1 = LV1 * _saw(_t * FR1 * freqC1(note) + LV2 * OP2 + FB1 * _sin(_t * FR1 * freqC1(note)));
        
        sound = OP1;
        
    }    
    
    else if(Bsyn == 88) // TEST WHATEVER IS HERE
    {
        env *= env_ADSR(Bprog,Boff-Bon,.1,2.,0.8,0.);
               
        float filterQ = 50.;
        float filterCO = 80. + 250. * env_ADSR(Bprog,Boff-Bon,.2,.3,0.5,0.);

        sound = macesaw(t, f, filterCO, filterQ, 0.010, 0.016, 3., 50.);
       
        sound += 0.4*_squ(t*0.505*f, 0.1 + 0.05*_sin(.25*Bproc));
       
//         sound = clip(sound);
       
//         return env * sound;
    }
    
    return clamp(env,0.,1.) * clamp(sound, -1., 1.);
}

// int note_pitch(int index)
// {
//     int ret = 0;
//     ret *= step(1,index)*(1-step(1,index))*36;
//     return ret;
// }

float mainSynth(float time)
{

int NO_tracks = 10;
int track_sep[11] = int[11](0,27,484,593,596,729,851,869,1047,1120,1258);
int note_pitch[1258] = int[1258](36,43,24,43,44,47,46,47,48,55,54,55,54,50,29,53,49,32,50,42,43,44,47,34,46,35,47,8,8,7,8,8,8,7,8,7,8,7,8,9,7,7,7,8,7,7,8,9,7,8,7,7,7,7,7,8,8,7,8,8,8,7,8,8,8,7,8,8,8,7,8,8,8,7,8,8,8,7,8,8,8,7,8,8,8,7,8,7,9,8,9,7,9,8,9,8,9,7,9,8,9,7,9,7,9,8,9,7,9,8,9,8,9,7,9,8,9,7,9,7,9,8,9,7,9,8,9,8,9,7,9,8,9,7,9,7,8,7,8,8,9,8,9,8,8,7,9,8,9,7,9,8,9,8,9,7,9,8,9,7,9,7,9,8,9,7,9,8,9,8,9,7,9,8,9,7,9,7,9,8,9,7,9,8,9,8,9,7,9,8,9,7,9,7,8,7,8,8,9,8,9,8,8,7,9,8,9,7,9,8,9,8,9,7,9,8,9,7,9,7,9,8,9,7,9,8,9,8,9,7,9,8,7,9,8,9,7,9,8,9,8,9,7,9,8,9,7,9,7,9,8,9,7,9,8,9,8,9,7,9,8,7,8,7,8,8,9,8,9,8,8,8,8,8,8,8,8,8,8,8,7,8,8,8,7,8,8,8,7,8,8,8,7,8,8,8,7,8,8,8,7,8,8,8,7,8,8,8,7,8,7,9,8,9,7,9,8,9,8,9,7,9,8,9,7,9,7,9,8,9,7,9,8,9,8,9,7,9,8,8,8,9,7,7,8,8,8,9,7,8,8,9,8,8,9,7,7,8,8,8,9,7,8,8,9,8,8,9,7,7,8,8,8,9,7,8,8,9,8,8,9,7,7,8,8,8,9,7,8,7,7,7,7,7,8,8,9,7,7,8,8,8,9,7,8,8,9,8,8,9,7,7,8,8,8,9,7,8,7,7,7,7,7,7,9,8,9,7,9,8,9,8,9,7,9,8,9,7,9,7,9,8,9,7,9,8,9,8,9,7,9,8,9,7,9,7,9,8,9,7,9,8,9,8,9,7,9,8,9,7,9,7,9,8,9,7,9,8,9,8,9,7,9,8,6,6,6,6,6,6,11,6,6,6,6,6,6,6,6,6,6,6,6,6,6,10,6,6,6,6,6,6,6,6,6,6,6,6,6,6,10,6,6,6,6,6,6,10,6,6,6,6,6,6,10,6,6,6,6,6,10,6,6,6,6,6,6,6,6,6,6,6,6,6,6,10,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,10,11,11,11,36,36,36,36,43,43,43,43,43,43,43,44,44,44,44,44,47,47,36,44,36,39,36,44,36,27,29,31,32,32,34,34,36,39,41,43,44,44,46,46,48,48,41,43,44,44,46,46,48,48,44,44,36,44,36,39,36,44,36,39,36,44,36,39,36,44,36,29,31,32,32,34,34,36,39,41,43,44,44,46,46,48,48,41,43,44,44,46,46,48,48,44,44,36,43,39,36,34,43,39,32,36,43,39,36,34,43,39,32,36,43,39,36,34,43,39,32,36,43,39,36,34,43,39,32,34,34,34,34,35,35,35,35,36,43,39,36,34,43,39,32,36,43,39,36,34,43,39,32,36,43,39,36,34,43,39,32,36,43,39,36,34,43,39,32,34,34,34,34,35,35,35,35,36,43,39,36,34,43,39,32,36,43,39,36,34,43,39,32,36,43,39,36,34,43,39,32,36,43,39,36,34,43,39,32,36,43,39,36,34,43,39,32,36,43,39,36,34,43,39,32,36,43,39,36,34,43,39,32,36,43,39,36,34,43,39,32,36,55,24,32,24,27,24,32,24,15,24,32,24,27,24,32,24,15,72,67,70,68,67,57,65,62,63,59,65,60,67,57,65,58,64,60,48,55,52,60,58,64,60,70,63,67,65,70,72,72,71,67,62,72,71,67,62,72,71,67,62,72,71,67,62,72,71,67,62,72,71,67,62,70,69,67,63,70,69,67,63,70,69,67,63,70,69,67,69,72,71,67,62,72,71,67,62,72,71,67,62,72,71,67,69,70,69,67,63,70,69,67,63,70,69,67,63,67,71,72,74,75,74,72,68,75,74,72,68,75,74,72,68,75,74,72,68,72,68,65,61,72,68,65,61,72,68,65,73,75,74,72,68,67,63,60,56,55,56,60,63,67,68,67,63,60,56,55,56,55,51,50,48,44,48,50,51,55,56,60,63,60,56,55,50,55,58,59,62,67,70,71,74,55,58,59,62,67,70,71,56,59,60,63,68,71,72,75,56,59,63,66,70,71,27,29,31,32,32,34,34,36,27,29,31,32,32,34,34,36,27,29,31,32,32,34,34,36,27,29,31,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,17,17,17,17,17,17,17,17,20,20,20,20,20,20,19,19,19,19,19,19,19,20,20,20,20,20,23,23,48,52,55,56,55,55,53,52,55,52,48,44,41,42,48,52,55,56,55,55,53,52,55,56,55,60,53,55,56,58,56,48,55,65,68,70,68,60,67,77,80,82,80,72,79,72,67,68,67,63,60,61,60,55,51,48,52,55,56,55,55,53,52,55,52,48,44,41,43,48,52,55,56,55,55,53,52,55,52,48,44,41,43,48,52,55,56,55,55,53,52,55,52,48,44,41,43,48,52,55,56,55,55,53,52,55,56,55,60,53,55,56,58,56,48,55,65,68,70,68,60,67,77,80,82,80,72,79,72,67,68,67,63,60,61,60,55,51);
float note_on[1258] = float[1258](0.0,0.5,8.0,12.0,14.0,15.0,54.0,55.0,56.0,59.0,61.0,63.0,65.0,67.0,68.0,69.0,71.0,72.0,73.0,75.0,76.0,78.0,79.0,110.0,110.,111.0,111.,8.0,8.5,9.0,9.5,10.0,10.5,11.0,11.5,12.0,12.25,12.5,12.75,12.875,13.0,13.25,13.5,13.75,14.0,14.5,14.75,14.875,15.0,15.25,15.375,15.5,15.625,15.75,15.875,16.0,16.5,17.0,17.5,18.0,18.5,19.0,19.5,20.0,20.5,21.0,21.5,22.0,22.5,23.0,23.5,24.0,24.5,25.0,25.5,26.0,26.5,27.0,27.5,28.0,28.5,29.0,29.5,30.0,30.5,31.0,31.5,32.0,32.125,32.25,32.375,32.5,32.625,32.75,32.875,33.0,33.125,33.25,33.375,33.5,33.625,33.75,33.875,34.0,34.125,34.25,34.375,34.5,34.625,34.75,34.875,35.0,35.125,35.25,35.375,35.5,35.625,35.75,35.875,36.0,36.125,36.25,36.375,36.5,36.625,36.75,36.875,37.0,37.125,37.25,37.375,37.5,37.625,37.75,37.875,38.0,38.125,38.25,38.375,38.625,38.75,38.875,39.0,39.125,39.375,40.0,40.125,40.25,40.375,40.5,40.625,40.75,40.875,41.0,41.125,41.25,41.375,41.5,41.625,41.75,41.875,42.0,42.125,42.25,42.375,42.5,42.625,42.75,42.875,43.0,43.125,43.25,43.375,43.5,43.625,43.75,43.875,44.0,44.125,44.25,44.375,44.5,44.625,44.75,44.875,45.0,45.125,45.25,45.375,45.5,45.625,45.75,45.875,46.0,46.125,46.25,46.375,46.625,46.75,46.875,47.0,47.125,47.375,48.0,48.125,48.25,48.375,48.5,48.625,48.75,48.875,49.0,49.125,49.25,49.375,49.5,49.625,49.75,49.875,50.0,50.125,50.25,50.375,50.5,50.625,50.75,50.875,51.0,51.125,51.25,51.375,51.5,52.0,52.125,52.25,52.375,52.5,52.625,52.75,52.875,53.0,53.125,53.25,53.375,53.5,53.625,53.75,53.875,54.0,54.125,54.25,54.375,54.5,54.625,54.75,54.875,55.0,55.125,55.25,55.375,55.5,56.0,56.125,56.25,56.375,56.625,56.75,56.875,57.0,57.125,57.375,58.25,58.5,58.75,59.0,59.25,59.5,59.75,60.0,60.5,61.0,61.5,62.0,62.5,63.0,63.5,64.0,64.5,65.0,65.5,66.0,66.5,67.0,67.5,68.0,68.5,69.0,69.5,70.0,70.5,71.0,71.5,72.0,72.5,73.0,73.5,74.0,74.5,75.0,75.5,76.0,76.125,76.25,76.375,76.5,76.625,76.75,76.875,77.0,77.125,77.25,77.375,77.5,77.625,77.75,77.875,78.0,78.125,78.25,78.375,78.5,78.625,78.75,78.875,79.0,79.125,79.25,79.375,79.5,80.25,80.75,80.875,81.0,81.5,81.75,82.5,82.75,82.875,83.0,83.25,83.75,83.875,84.25,84.75,84.875,85.0,85.5,85.75,86.5,86.75,86.875,87.0,87.25,87.75,87.875,88.25,88.75,88.875,89.0,89.5,89.75,90.5,90.75,90.875,91.0,91.25,91.75,91.875,92.25,92.75,92.875,93.0,93.5,93.75,94.5,94.75,94.875,95.0,95.25,95.375,95.5,95.625,95.75,95.875,96.25,96.75,96.875,97.0,97.5,97.75,98.5,98.75,98.875,99.0,99.25,99.75,99.875,100.25,100.75,100.875,101.0,101.5,101.75,102.5,102.75,102.875,103.0,103.25,103.375,103.5,103.625,103.75,103.875,104.0,104.125,104.25,104.375,104.5,104.625,104.75,104.875,105.0,105.125,105.25,105.375,105.5,105.625,105.75,105.875,106.0,106.125,106.25,106.375,106.5,106.625,106.75,106.875,107.0,107.125,107.25,107.375,107.5,107.625,107.75,107.875,108.0,108.125,108.25,108.375,108.5,108.625,108.75,108.875,109.0,109.125,109.25,109.375,109.5,109.625,109.75,109.875,110.0,110.125,110.25,110.375,110.5,110.625,110.75,110.875,111.0,111.125,111.25,111.375,111.5,12.0,12.5,13.25,14.0,14.25,14.5,16.0,32.0,32.5,33.5,34.0,34.5,35.5,36.0,36.5,37.5,38.0,38.25,38.75,39.0,39.25,39.5,40.0,40.5,41.5,42.0,42.5,43.5,44.0,44.5,45.5,46.0,46.25,46.75,47.0,47.25,47.5,48.0,48.5,49.5,50.0,50.5,51.5,51.75,52.0,52.5,53.5,54.0,54.5,55.5,55.75,56.0,56.25,56.75,57.0,57.25,57.5,68.0,69.0,70.0,71.0,72.0,73.0,74.0,75.0,76.0,76.5,77.5,78.0,78.5,79.5,79.75,80.0,81.25,82.0,82.25,84.0,85.25,86.0,86.25,88.0,89.25,90.0,90.25,92.0,93.25,94.0,94.25,96.0,97.25,98.0,98.25,100.0,101.25,102.0,102.25,104.0,104.5,105.5,106.0,106.5,107.5,108.0,108.5,109.5,110.0,110.5,111.5,111.75,38.0,58.0,80.0,8.0,9.0,10.0,11.0,12.0,12.25,12.5,12.75,13.0,13.25,13.5,13.75,14.0,14.25,14.5,14.75,15.0,15.5,16.0,17.25,18.0,19.25,20.0,21.25,22.0,23.25,23.5,23.75,24.0,24.25,24.5,24.75,25.0,25.25,25.5,25.75,26.0,26.25,26.5,26.75,27.0,27.25,27.5,27.75,28.0,28.25,28.5,28.75,29.0,29.25,29.5,29.75,80.0,81.25,82.0,83.25,84.0,85.25,86.0,87.25,88.0,89.25,90.0,91.25,92.0,93.25,94.0,95.5,95.75,96.0,96.25,96.5,96.75,97.0,97.25,97.5,97.75,98.0,98.25,98.5,98.75,99.0,99.25,99.5,99.75,100.0,100.25,100.5,100.75,101.0,101.25,101.5,101.75,102.0,102.25,102.5,102.75,103.0,103.25,103.5,103.75,104.0,104.25,104.5,104.75,105.0,105.25,105.5,105.75,106.0,106.25,106.5,106.75,107.0,107.25,107.5,107.75,108.0,108.25,108.5,108.75,109.0,109.25,109.5,109.75,110.0,110.25,110.5,110.75,111.0,111.25,111.5,111.75,30.0,30.25,30.5,30.75,31.0,31.25,31.5,31.75,32.0,32.25,32.5,32.75,33.0,33.25,33.5,33.75,34.0,34.25,34.5,34.75,35.0,35.25,35.5,35.75,36.0,36.25,36.5,36.75,37.0,37.25,37.5,37.75,38.0,38.25,38.5,38.75,39.0,39.25,39.5,39.75,40.0,40.25,40.5,40.75,41.0,41.25,41.5,41.75,42.0,42.25,42.5,42.75,43.0,43.25,43.5,43.75,44.0,44.25,44.5,44.75,45.0,45.25,45.5,45.75,46.0,46.25,46.5,46.75,47.0,47.25,47.5,47.75,48.0,48.25,48.5,48.75,49.0,49.25,49.5,49.75,50.0,50.25,50.5,50.75,51.0,51.25,51.5,51.75,52.0,52.25,52.5,52.75,53.0,53.25,53.5,53.75,54.0,54.25,54.5,54.75,55.0,55.25,55.5,55.75,56.0,57.0,80.0,81.25,82.0,83.25,84.0,85.25,86.0,87.25,88.0,89.25,90.0,91.25,92.0,93.25,94.0,96.25,40.0,40.0,42.0,42.0,44.0,44.0,46.0,46.0,48.0,48.0,50.0,50.0,52.0,52.0,54.0,54.0,56.0,56.0,56.0,56.125,56.25,56.375,56.5,56.625,56.75,56.875,57.0,57.25,57.5,57.75,58.0,59.0,59.125,59.25,59.375,59.5,59.625,59.75,59.875,60.0,60.125,60.25,60.375,60.5,60.625,60.75,60.875,61.0,61.125,61.25,61.375,61.5,61.625,61.75,61.875,62.0,62.125,62.25,62.375,62.5,62.625,62.75,62.875,63.0,63.125,63.25,63.375,63.5,63.625,63.75,63.875,64.0,64.125,64.25,64.375,64.5,64.625,64.75,64.875,65.0,65.125,65.25,65.375,65.5,65.625,65.75,65.875,66.0,66.125,66.25,66.375,66.5,66.625,66.75,66.875,67.0,67.125,67.25,67.375,67.5,67.625,67.75,67.875,68.0,68.125,68.25,68.375,68.5,68.625,68.75,68.875,69.0,69.125,69.25,69.375,69.5,69.625,69.75,69.875,70.0,70.125,70.25,70.375,70.5,70.625,70.75,70.875,71.0,71.125,71.25,71.375,71.5,71.625,71.75,71.875,72.0,72.125,72.25,72.375,72.5,72.625,72.75,72.875,73.0,73.125,73.25,73.375,73.5,73.625,73.75,73.875,74.0,74.125,74.25,74.375,74.5,74.625,74.75,74.875,75.0,75.125,75.25,75.375,75.5,75.625,75.75,75.875,76.0,76.125,76.25,76.375,76.5,76.625,76.75,76.875,77.0,77.125,77.25,77.375,77.5,77.625,77.75,77.875,78.0,78.125,78.25,78.375,78.5,78.625,78.75,78.875,79.0,79.125,79.25,79.375,79.5,23.25,23.5,23.75,24.0,24.25,24.5,24.75,25.0,25.25,25.5,25.75,26.0,26.25,26.5,26.75,27.0,27.25,27.5,27.75,28.0,28.25,28.5,28.75,29.0,29.25,29.5,29.75,59.0,59.5,60.0,60.5,61.0,61.5,62.0,62.5,63.0,63.5,64.0,64.5,65.0,65.5,66.0,66.5,67.0,67.5,68.0,68.5,69.0,69.5,70.0,70.5,71.0,71.5,72.0,72.5,73.0,73.5,74.0,74.5,76.0,76.25,76.5,76.75,77.0,77.25,77.5,77.75,78.0,78.25,78.5,78.75,79.0,79.5,16.0,16.25,16.5,16.75,17.0,17.5,17.75,18.0,18.25,18.5,18.75,19.0,19.5,19.75,20.0,20.25,20.5,20.75,21.0,21.5,21.75,22.0,22.25,22.5,22.75,23.0,23.5,23.75,24.0,24.25,24.5,24.75,25.0,25.75,26.0,26.25,26.5,26.75,27.0,27.75,28.0,28.25,28.5,28.75,29.0,29.5,29.75,30.0,30.25,30.5,30.75,31.0,31.25,31.5,31.75,80.0,80.25,80.5,80.75,81.0,81.5,81.75,82.0,82.25,82.5,82.75,83.0,83.5,83.75,84.0,84.25,84.5,84.75,85.0,85.5,85.75,86.0,86.25,86.5,86.75,87.0,87.5,87.75,88.0,88.25,88.5,88.75,89.0,89.5,89.75,90.0,90.25,90.5,90.75,91.0,91.5,91.75,92.0,92.25,92.5,92.75,93.0,93.5,93.75,94.0,94.25,94.5,94.75,95.0,95.5,95.75,96.0,96.25,96.5,96.75,97.0,97.75,98.0,98.25,98.5,98.75,99.0,99.75,100.0,100.25,100.5,100.75,101.0,101.5,101.75,102.0,102.25,102.5,102.75,103.0,103.25,103.5,103.75);
float note_off[1258] = float[1258](7.0,8.0,12.0,13.75,15.0,16.0,55.0,56.0,57.0,60.0,62.0,64.0,66.0,68.0,72.0,70.0,72.0,75.0,74.0,76.0,77.75,79.0,80.0,111.,111.0,112.,112.0,8.25,8.75,9.25,9.75,10.25,10.75,11.25,11.75,12.25,12.5,12.75,12.875,13.0,13.25,13.5,13.75,14.0,14.25,14.75,14.875,15.0,15.25,15.375,15.5,15.625,15.75,15.875,16.0,16.25,16.75,17.25,17.75,18.25,18.75,19.25,19.75,20.25,20.75,21.25,21.75,22.25,22.75,23.25,23.75,24.25,24.75,25.25,25.75,26.25,26.75,27.25,27.75,28.25,28.75,29.25,29.75,30.25,30.75,31.25,31.75,32.125,32.25,32.375,32.5,32.625,32.75,32.875,33.0,33.125,33.25,33.375,33.5,33.625,33.75,33.875,34.0,34.125,34.25,34.375,34.5,34.625,34.75,34.875,35.0,35.125,35.25,35.375,35.5,35.625,35.75,35.875,36.0,36.125,36.25,36.375,36.5,36.625,36.75,36.875,37.0,37.125,37.25,37.375,37.5,37.625,37.75,37.875,38.0,38.125,38.25,38.375,38.5,38.75,38.875,39.0,39.125,39.25,39.5,40.125,40.25,40.375,40.5,40.625,40.75,40.875,41.0,41.125,41.25,41.375,41.5,41.625,41.75,41.875,42.0,42.125,42.25,42.375,42.5,42.625,42.75,42.875,43.0,43.125,43.25,43.375,43.5,43.625,43.75,43.875,44.0,44.125,44.25,44.375,44.5,44.625,44.75,44.875,45.0,45.125,45.25,45.375,45.5,45.625,45.75,45.875,46.0,46.125,46.25,46.375,46.5,46.75,46.875,47.0,47.125,47.25,47.5,48.125,48.25,48.375,48.5,48.625,48.75,48.875,49.0,49.125,49.25,49.375,49.5,49.625,49.75,49.875,50.0,50.125,50.25,50.375,50.5,50.625,50.75,50.875,51.0,51.125,51.25,51.375,51.5,51.75,52.125,52.25,52.375,52.5,52.625,52.75,52.875,53.0,53.125,53.25,53.375,53.5,53.625,53.75,53.875,54.0,54.125,54.25,54.375,54.5,54.625,54.75,54.875,55.0,55.125,55.25,55.375,55.5,55.75,56.125,56.25,56.375,56.5,56.75,56.875,57.0,57.125,57.25,57.5,58.5,58.75,59.0,59.25,59.5,59.75,60.0,60.25,60.75,61.25,61.75,62.25,62.75,63.25,63.75,64.25,64.75,65.25,65.75,66.25,66.75,67.25,67.75,68.25,68.75,69.25,69.75,70.25,70.75,71.25,71.75,72.25,72.75,73.25,73.75,74.25,74.75,75.25,75.75,76.125,76.25,76.375,76.5,76.625,76.75,76.875,77.0,77.125,77.25,77.375,77.5,77.625,77.75,77.875,78.0,78.125,78.25,78.375,78.5,78.625,78.75,78.875,79.0,79.125,79.25,79.375,79.5,79.75,80.375,80.875,81.0,81.125,81.625,81.875,82.625,82.875,83.0,83.125,83.375,83.875,84.0,84.375,84.875,85.0,85.125,85.625,85.875,86.625,86.875,87.0,87.125,87.375,87.875,88.0,88.375,88.875,89.0,89.125,89.625,89.875,90.625,90.875,91.0,91.125,91.375,91.875,92.0,92.375,92.875,93.0,93.125,93.625,93.875,94.625,94.875,95.0,95.125,95.375,95.5,95.625,95.75,95.875,96.0,96.375,96.875,97.0,97.125,97.625,97.875,98.625,98.875,99.0,99.125,99.375,99.875,100.0,100.375,100.875,101.0,101.125,101.625,101.875,102.625,102.875,103.0,103.125,103.375,103.5,103.625,103.75,103.875,104.0,104.125,104.25,104.375,104.5,104.625,104.75,104.875,105.0,105.125,105.25,105.375,105.5,105.625,105.75,105.875,106.0,106.125,106.25,106.375,106.5,106.625,106.75,106.875,107.0,107.125,107.25,107.375,107.5,107.625,107.75,107.875,108.0,108.125,108.25,108.375,108.5,108.625,108.75,108.875,109.0,109.125,109.25,109.375,109.5,109.625,109.75,109.875,110.0,110.125,110.25,110.375,110.5,110.625,110.75,110.875,111.0,111.125,111.25,111.375,111.5,111.75,12.25,12.75,13.5,14.25,14.5,14.75,16.25,32.25,32.75,33.75,34.25,34.75,35.75,36.25,36.75,37.75,38.25,38.5,39.0,39.25,39.5,39.75,40.25,40.75,41.75,42.25,42.75,43.75,44.25,44.75,45.75,46.25,46.5,47.0,47.25,47.5,47.75,48.25,48.75,49.75,50.25,50.75,51.75,52.0,52.25,52.75,53.75,54.25,54.75,55.75,56.0,56.25,56.5,57.0,57.25,57.5,57.75,68.25,69.25,70.25,71.25,72.25,73.25,74.25,75.25,76.25,76.75,77.75,78.25,78.75,79.75,80.0,80.25,81.5,82.25,82.5,84.25,85.5,86.25,86.5,88.25,89.5,90.25,90.5,92.25,93.5,94.25,94.5,96.25,97.5,98.25,98.5,100.25,101.5,102.25,102.5,104.25,104.75,105.75,106.25,106.75,107.75,108.25,108.75,109.75,110.25,110.75,111.75,112.0,39.0,59.0,81.0,9.0,10.0,11.0,12.0,12.25,12.5,12.75,13.0,13.25,13.5,13.75,14.0,14.25,14.5,14.75,15.0,15.5,16.0,17.25,18.0,19.25,20.0,21.25,22.0,23.25,23.5,23.75,24.0,24.25,24.5,24.75,25.0,25.25,25.5,25.75,26.0,26.25,26.5,26.75,27.0,27.25,27.5,27.75,28.0,28.25,28.5,28.75,29.0,29.25,29.5,29.75,30.0,81.25,82.0,83.25,84.0,85.25,86.0,87.25,88.0,89.25,90.0,91.25,92.0,93.25,94.0,95.25,95.75,96.0,96.25,96.5,96.75,97.0,97.25,97.5,97.75,98.0,98.25,98.5,98.75,99.0,99.25,99.5,99.75,100.0,100.25,100.5,100.75,101.0,101.25,101.5,101.75,102.0,102.25,102.5,102.75,103.0,103.25,103.5,103.75,104.0,104.25,104.5,104.75,105.0,105.25,105.5,105.75,106.0,106.25,106.5,106.75,107.0,107.25,107.5,107.75,108.0,108.25,108.5,108.75,109.0,109.25,109.5,109.75,110.0,110.25,110.5,110.75,111.0,111.25,111.5,111.75,112.0,30.25,30.5,30.75,31.0,31.25,31.5,31.75,32.0,32.25,32.5,32.75,33.0,33.25,33.5,33.75,34.0,34.25,34.5,34.75,35.0,35.25,35.5,35.75,36.0,36.25,36.5,36.75,37.0,37.25,37.5,37.75,38.0,38.25,38.5,38.75,39.0,39.25,39.5,39.75,40.0,40.25,40.5,40.75,41.0,41.25,41.5,41.75,42.0,42.25,42.5,42.75,43.0,43.25,43.5,43.75,44.0,44.25,44.5,44.75,45.0,45.25,45.5,45.75,46.0,46.25,46.5,46.75,47.0,47.25,47.5,47.75,48.0,48.25,48.5,48.75,49.0,49.25,49.5,49.75,50.0,50.25,50.5,50.75,51.0,51.25,51.5,51.75,52.0,52.25,52.5,52.75,53.0,53.25,53.5,53.75,54.0,54.25,54.5,54.75,55.0,55.25,55.5,55.75,56.0,56.75,57.5,81.25,82.0,83.25,84.0,85.25,86.0,87.25,88.0,89.25,90.0,91.25,92.0,93.25,94.0,95.25,97.0,42.0,42.0,44.0,44.0,46.0,46.0,48.0,48.0,50.0,50.0,52.0,52.0,54.0,54.0,56.0,56.0,58.0,58.0,56.125,56.25,56.375,56.5,56.625,56.75,56.875,57.0,57.25,57.5,57.75,58.0,58.5,59.125,59.25,59.375,59.5,59.625,59.75,59.875,60.0,60.125,60.25,60.375,60.5,60.625,60.75,60.875,61.0,61.125,61.25,61.375,61.5,61.625,61.75,61.875,62.0,62.125,62.25,62.375,62.5,62.625,62.75,62.875,63.0,63.125,63.25,63.375,63.5,63.625,63.75,63.875,64.0,64.125,64.25,64.375,64.5,64.625,64.75,64.875,65.0,65.125,65.25,65.375,65.5,65.625,65.75,65.875,66.0,66.125,66.25,66.375,66.5,66.625,66.75,66.875,67.0,67.125,67.25,67.375,67.5,67.625,67.75,67.875,68.0,68.125,68.25,68.375,68.5,68.625,68.75,68.875,69.0,69.125,69.25,69.375,69.5,69.625,69.75,69.875,70.0,70.125,70.25,70.375,70.5,70.625,70.75,70.875,71.0,71.125,71.25,71.375,71.5,71.625,71.75,71.875,72.0,72.125,72.25,72.375,72.5,72.625,72.75,72.875,73.0,73.125,73.25,73.375,73.5,73.625,73.75,73.875,74.0,74.125,74.25,74.375,74.5,74.625,74.75,74.875,75.0,75.125,75.25,75.375,75.5,75.625,75.75,75.875,76.0,76.125,76.25,76.375,76.5,76.625,76.75,76.875,77.0,77.125,77.25,77.375,77.5,77.625,77.75,77.875,78.0,78.125,78.25,78.375,78.5,78.625,78.75,78.875,79.0,79.125,79.25,79.375,79.5,79.625,23.5,23.75,24.0,24.25,24.5,24.75,25.0,25.25,25.5,25.75,26.0,26.25,26.5,26.75,27.0,27.25,27.5,27.75,28.0,28.25,28.5,28.75,29.0,29.25,29.5,29.75,30.0,59.5,60.0,60.5,61.0,61.5,62.0,62.5,63.0,63.5,64.0,64.5,65.0,65.5,66.0,66.5,67.0,67.5,68.0,68.5,69.0,69.5,70.0,70.5,71.0,71.5,72.0,72.5,73.0,73.5,74.0,74.5,76.0,76.25,76.5,76.75,77.0,77.25,77.5,77.75,78.0,78.25,78.5,78.75,79.0,79.5,80.0,16.25,16.5,16.75,17.0,17.25,17.75,18.0,18.25,18.5,18.75,19.0,19.25,19.75,20.0,20.25,20.5,20.75,21.0,21.25,21.75,22.0,22.25,22.5,22.75,23.0,23.25,23.75,24.0,24.25,24.5,24.75,25.0,25.75,26.0,26.25,26.5,26.75,27.0,27.75,28.0,28.25,28.5,28.75,29.0,29.75,29.75,30.0,30.25,30.5,30.75,31.0,31.25,31.5,31.75,32.0,80.25,80.5,80.75,81.0,81.25,81.75,82.0,82.25,82.5,82.75,83.0,83.25,83.75,84.0,84.25,84.5,84.75,85.0,85.25,85.75,86.0,86.25,86.5,86.75,87.0,87.25,87.75,88.0,88.25,88.5,88.75,89.0,89.25,89.75,90.0,90.25,90.5,90.75,91.0,91.25,91.75,92.0,92.25,92.5,92.75,93.0,93.25,93.75,94.0,94.25,94.5,94.75,95.0,95.25,95.75,96.0,96.25,96.5,96.75,97.0,97.75,98.0,98.25,98.5,98.75,99.0,99.75,100.0,100.25,100.5,100.75,101.0,101.75,102.0,102.25,102.5,102.75,103.,103.25,103.5,103.75,104.,104.25);
int track_synth[10]  = int[10]  (17,08,06,11,81,2,3,31,21,81);
float track_norm[10] = float[10](1.,.4,.4,.4,.6,.8,.25,.4,.75,.75); 
int oct[10]          = int[10](-2,0,0,0,-2,0,0,-1,-2,-2); //change to transpose some tracks for whole octaves
float global_norm = 0.7;
float max_note_off = 112.0;
int drum_index_lower = 5;
int drum_index_upper = 11;

// Track list:
//  0  Horny Frenchs
//  1  Drommln          (DRUMS)
//  2  Kick             (DRUMS)
//  3  NoiseSplash      (DRUMS)
//  4  Sündiger Synth   (selber sound wie 9)
//  5  Übler Synthbass
//  6  Mellow Pellow
//  7  Elektrosäge
//  8  Mittelübler Bass
//  9  Sündiger Synth Melo (selber sound wie 4)
    
    float r = 0.;
    float d = 0.;
    
    //which beat are we at?
    float B = mod(BPS * time, max_note_off); // mod for looping
    if(B > max_note_off) return r;

    // drum / sidechaining parameters
    float amt_drum = 0.3;
    float r_sidechain = 1.;
    float amt_sidechain = 0.99;
    float dec_sidechain = 0.6;
    
    //defaults (should lead to no sound)
    float Bon = -1.;
    float Boff = -1.;
    int Bpitch = -1;
    int Bsyn = -1;
    
    for(int trk = 0; trk < NO_tracks; trk++)
    {
        if(DEBUG_ONLY_TRACK >=0 && trk != DEBUG_ONLY_TRACK) continue;

//         if(B < note_on[(track_sep[trk]+0)]) continue;
//         if(B > note_off[(track_sep[trk+1]-1)]) continue;

        int LEN = track_sep[trk+1] - track_sep[trk];
        
        int _noteU = LEN-1;
        for(int i=0; i<LEN-1; i++) if(B < note_on[(track_sep[trk]+i+1)]) {_noteU = i; break;}
        
        int _noteL = LEN-1;
        for(int i=0; i<LEN-1; i++) if(B <= note_off[(track_sep[trk]+i)]) {_noteL = i; break;}
        
        for(int _note = _noteL; _note <= _noteU; _note++)
        {
            Bon    = note_on[(track_sep[trk]+_note)];
            Boff   = note_off[(track_sep[trk]+_note)];
            Bpitch = note_pitch[(track_sep[trk]+_note)];
            Bsyn   = track_synth[trk];

            if (Bsyn < drum_index_lower || Bsyn > drum_index_upper)
            {
                r += track_norm[trk] * distsin(time, B, Bon, Boff, Bpitch + 12*oct[trk], Bsyn);
            }
            else // drums
            {
//                 continue; // disable drums, debug
                Bsyn = Bpitch;
                float _d = 0.;
                float anticlick = 1.-exp(-1000.*(B-Bon));
                if(Bsyn == 6)
                {
//                     case 6: // KICK (WITH SIDECHAIN)
                    _d = facekick(B*SPB, Bon*SPB, 80, Bsyn) * theta(Boff-B);
                    r_sidechain = anticlick - amt_sidechain * theta(B-Bon) * smoothstep(-dec_sidechain,0.,Bon-B);
                }
                else if(Bsyn == 5)
                {
//                     case 5: // SIDECHAIN ONLY
                        r_sidechain = anticlick - amt_sidechain * theta(B-Bon) * smoothstep(-dec_sidechain,0.,Bon-B);
                }
                else if(Bsyn == 7)
                {
//                     case 7: // SNARE
                        _d = snare(B*SPB, Bon*SPB, 100, Bsyn);
                }
                else if(Bsyn == 8)
                {
//                     case 8: // HIHAT
                        _d = hut(B*SPB, Bon*SPB, 100, Bsyn);
                }
                else if(Bsyn == 9)
                {
//                     case 9: // SHAKE
                        _d = shake(B*SPB, Bon*SPB, 100, Bsyn);
                }
                
                d += track_norm[trk] * _d;
            }
        }
    }

    d *= global_norm;
    r *= global_norm;    

    if(DEBUG_ONLY_DRUMS) return 0.99 * clamp(d, -1., 1.);
    if(DEBUG_ONLY_MELO) return 0.99 * clamp(r, -1., 1.);

    r_sidechain = 1.;
    amt_drum = .5;
    
    float snd = clamp((1.-amt_drum) * r_sidechain * r + amt_drum * d, -1., 1.);
  
    return snd;
//    return sign(snd) * sqrt(abs(snd));
}

vec2 mainSound(float t)
{
    //maybe this works in enhancing the stereo feel
    float stereo_width = 0.1;
    float stereo_delay = 0.00001;
    
//     float comp_l = mainSynth(t) + stereo_width * mainSynth(t - stereo_delay);
//     float comp_r = mainSynth(t) + stereo_width * mainSynth(t + stereo_delay);
    
//     return vec2(comp_l * .99999, comp_r * .99999); 
    return vec2(tanh(mainSynth(t)));
}

void main() 
{
   // compute time `t` based on the pixel we're about to write
   // the 512.0 means the texture is 512 pixels across so it's
   // using a 2 dimensional texture, 512 samples per row
   float t = iBlockOffset + ((gl_FragCoord.x-0.5) + (gl_FragCoord.y-0.5)*512.0)/iSampleRate;
    
//    t = mod(t, 4.5);
    
   // Get the 2 values for left and right channels
   vec2 y = iVolume * mainSound( t );

   // convert them from -1 to 1 to 0 to 65536
   vec2 v  = floor((0.5+0.5*y)*65536.0);

   // separate them into low and high bytes
   vec2 vl = mod(v,256.0)/255.0;
   vec2 vh = floor(v/256.0)/255.0;

   // write them out where 
   // RED   = channel 0 low byte
   // GREEN = channel 0 high byte
   // BLUE  = channel 1 low byte
   // ALPHA = channel 2 high byte
   gl_FragColor = vec4(vl.x,vh.x,vl.y,vh.y);
}

